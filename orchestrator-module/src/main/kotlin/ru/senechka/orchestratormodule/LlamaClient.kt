package ru.senechka.orchestratormodule

import java.net.HttpURLConnection
import java.net.URL
import kotlinx.serialization.*
import kotlinx.serialization.json.*

object LlamaClient {

    @Serializable
    data class LlamaRequest(
        val model: String = "llama3:8b", // üí• –£–±–µ–¥–∏—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–¥–∞–Ω–∞
        val prompt: String,
        val stream: Boolean = false
    )

    fun sendPrompt(prompt: String): String {
        val apiUrl = "http://localhost:11434/api/generate"

        val request = LlamaRequest(prompt = prompt)
        val json = Json { encodeDefaults = true }  // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –ø–æ–ª–µ–π
        val requestJson = json.encodeToString(request)

        println("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON: $requestJson")

        val connection = URL(apiUrl).openConnection() as HttpURLConnection
        connection.requestMethod = "POST"
        connection.setRequestProperty("Content-Type", "application/json")
        connection.doOutput = true
        connection.connectTimeout = 5000
        connection.readTimeout = 50000

        connection.outputStream.use { it.write(requestJson.toByteArray()) }

        val responseText = try {
            connection.inputStream.bufferedReader().readText()
        } catch (e: Exception) {
            connection.errorStream?.bufferedReader()?.readText()
                ?: throw RuntimeException("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLAMA3: ${e.message}")
        } finally {
            connection.disconnect()
        }

        println("üü° DEBUG: raw responseText = $responseText")

        return try {
            val jsonElement = Json.parseToJsonElement(responseText).jsonObject
            jsonElement["response"]?.jsonPrimitive?.content ?: "[LLAMA3] –ù–µ—Ç –ø–æ–ª—è 'response'"
        } catch (e: Exception) {
            "[LLAMA3] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞: $responseText"
        }
    }
}
