package ru.senechka.orchestratormodule

import kotlinx.serialization.json.*
import ru.senechka.syntaxtreemodule.util.AnalyzerRunner

object OrchestratorModule {

    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–¥ –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ)
     */
    fun handleUserQuery(code: String, userPrompt: String): String {
        val systemPrompt = "–¢—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ù–∞ –≤—Ö–æ–¥–µ ‚Äî –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. " +
                "–í–µ—Ä–Ω–∏, –∫–∞–∫–∏–µ –≤–æ–ª–∫–µ—Ä—ã –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π—é –¢–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫. –í–æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ª–∫–µ—Ä—ã, –≤—ã–±–∏—Ä–∞–π –∏–∑ –Ω–∏—Ö singleton, interfacesegregation, encapsulation, factory, composition, codemetrics, loops, solid, inheritance, polymorphism, template, dependency"
        val fullPrompt = "$systemPrompt\n\n–ó–∞–¥–∞–Ω–∏–µ: $userPrompt"
        val llamaResponse = LlamaClient.sendPrompt(fullPrompt)

        val workers = parseWalkerList(llamaResponse)

        val jsonAnalysis = AnalyzerRunner.analyze(code, workers)

        val validationPrompt = """
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É: "$userPrompt"
            –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON):
            $jsonAnalysis
        
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        
            –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –µ–≥–æ –∫–∞–∫ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
            
            ‚úÖ –î–∞ ‚Äî –ø–∞—Ç—Ç–µ—Ä–Ω –∏–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ  
            ‚ö† –ß–∞—Å—Ç–∏—á–Ω–æ ‚Äî –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–π–¥–µ–Ω, –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞   
            ‚ùå –ù–µ—Ç ‚Äî –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞—á–µ
        
            –¢—ã –æ–±—è–∑–∞–Ω –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∏ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π ‚úÖ –î–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏.
        """.trimIndent()

        val finalValidation = LlamaClient.sendPrompt(validationPrompt)

        return """
            üîπ –ó–∞–ø—Ä–æ—Å: $userPrompt
            üîß –í–æ—Ä–∫–µ—Ä—ã: ${workers.joinToString(", ")}
            üìä –ê–Ω–∞–ª–∏–∑: $jsonAnalysis
            üß† –û—Ç–≤–µ—Ç LLAMA3: $finalValidation
        """.trimIndent()
    }

    /**
     * –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLAMA –≤ —Å–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
     */
    private fun parseWalkerList(llamaResponse: String): List<String> {
        return llamaResponse
            .lowercase()
            .replace(Regex("[^a-z0-9_,\\s]"), "")
            .split(",", " ", "\n")
            .map { it.trim() }
            .filter { it.isNotBlank() }
            .distinct()
    }
}
